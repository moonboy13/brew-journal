@page "/edithop"
@page "/edithop/{Id:int}"
@inject HttpClient Http
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@using Models;
@using System.Text.Json; 
@using UserProp = BrewJournal.Client.Properties.UserResources; 

<h1>@string.Format(UserProp.AddOrModify, nameof(Hop))</h1>

<EditForm Model="@Hop" OnSubmit="@FormSubmitted">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<label class="col-form-label" for="name">@UserProp.Name</label>
	<InputText id="name" @bind-Value="Hop.Name" required />
	<label class="col-form-label" for="alphaacid">@UserProp.AlphaAcidContent</label>
	<InputNumber id="alphaacid" @bind-Value="Hop.AlphaAcidContent" required />
	<label class="col-form-label" for="betaacid">@UserProp.BetaAcidContent</label>
	<InputNumber id="betaacid" @bind-Value="Hop.BetaAcidContent" required />
	<label class="col-form-label" for="active">@UserProp.Active</label>
	<InputCheckbox id="active" @bind-Value="Hop.Active" />
	<input type="submit" class="btn btn-primary" value=@UserProp.Save />
</EditForm>

<hr />

@if (Hops is null)
{
	<p><em>@UserProp.Loading</em></p>
}
else if (!Hops.Any())
{
	<p>@string.Format(UserProp.NoRecordMatchesFilter, nameof(Hop))</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>@UserProp.Name</th>
				<th>@UserProp.AlphaAcidContent</th>
				<th>@UserProp.BetaAcidContent</th>
				<th>&nbsp;</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var hop in Hops)
			{
				<tr>
					<td>@hop.Name.Trim()</td>
					<td>@hop.AlphaAcidContent %</td>
					<td>@hop.BetaAcidContent %</td>
					<td align="right" @onclick="(args) => DeleteClicked(hop, args)"><span class="oi oi-x" alt="Delete Hop"></span></td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public int Id { get; set; }

	private Hop Hop { get; set; } = new Hop();

	private List<Hop> Hops { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Hops = await Http.GetFromJsonAsync<List<Hop>>("Hop");


		if (Id > 0)
		{
			//-- Load from data store
		}

		//-- Compiler implicitly knows to return an empty task
		return;
	}

	async Task FormSubmitted(EditContext editContext)
	{
		//-- Check that the form is valid before submitting
		if (editContext.Validate())
		{
			var saveReturn = await Http.PostAsJsonAsync("/Hop", Hop);
			if (!saveReturn.IsSuccessStatusCode)
			{
				//-- Format that string, format it good.
				ToastService.ShowError(string.Format("{0} {1}{2}{3}", UserProp.HopSaveFailed, string.Format(UserProp.ServerResponseCode, saveReturn.StatusCode),
				Environment.NewLine, string.Format(UserProp.ServerResponseReasonPhrase, saveReturn.ReasonPhrase)));
			}
			else
			{
				Hops = await Http.GetFromJsonAsync<List<Hop>>("Hop");
			}
		}
	}

	async Task DeleteClicked(Hop hop, MouseEventArgs args)
	{
		if(await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {hop.Name}?"))
		{
			await Http.DeleteAsync($"/Hop/{hop.Id}");
			Hops.Remove(hop);
		}
	}
}
