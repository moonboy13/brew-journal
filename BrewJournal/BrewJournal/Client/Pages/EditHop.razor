@page "/edithop"
@page "/edithop/{Id:int}"
@inject HttpClient Http
@using Models;

<h1>Add or Modify Hop</h1>

<EditForm Model="@Hop">
	<label for="name">Name</label>
	<InputText id="name" @bind-Value="Hop.Name" required />
	<label for="alphaacid">Alpha Acid Content</label>
	<InputNumber id="alphaacid" @bind-Value="Hop.AlphaAcidContent" required />
	<label for="betaacid">Beta Acid Content</label>
	<InputNumber id="betaacid" @bind-Value="Hop.BetaAcidContent" required />
	<label for="active">Active</label>
	<InputCheckbox id="active" @bind-Value="Hop.Active" />
	<button>Save</button>
</EditForm>

<hr />

@if (Hops is null)
{
	<p><em>Loading...</em></p>
}
else if (!Hops.Any())
{
	<p>No hops entered into databases match these filters.</p>
}
else
{
	<table class="table">
		<thead>
			<tr>
				<th>Name</th>
				<th>Alpha Acid Content</th>
				<th>Beta Acid Content</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var hop in Hops)
			{
				<tr>
					<td>@hop.Name.Trim()</td>
					<td>@hop.AlphaAcidContent %</td>
					<td>@hop.BetaAcidContent %</td>
				</tr>
			}
		</tbody>
	</table>
}

@code {
	[Parameter]
	public int Id { get; set; }

	private Hop Hop { get; set; } = new Hop();

	private List<Hop> Hops { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Hops = await Http.GetFromJsonAsync<List<Hop>>("Hop").ConfigureAwait(true);


		if (Id > 0)
		{
			//-- Load from data store
		}

		//-- Compiler implicitly knows to return an empty task
		return;
	}
}
